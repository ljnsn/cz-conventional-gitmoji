[tool.poetry]
name = "cz-conventional-gitmoji"
version = "0.2.0"
description = "A commitizen plugin that combines gitmoji and conventional."
authors = ["ljnsn <82611987+ljnsn@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
packages = [
  {include = "shared", from = "src"},
  {include = "cz_gitmoji", from = "src"},
  {include = "gitmojify", from = "src"}
]
repository = "https://github.com/ljnsn/cz-conventional-gitmoji"

[tool.poetry.plugins."commitizen.plugin"]
cz_gitmoji = "cz_gitmoji.main:CommitizenGitmojiCz"

[tool.poetry.scripts]
gitmojify = "gitmojify.mojify:run"

[tool.poetry.dependencies]
python = "^3.7"
commitizen = "^3.2.2"
attrs = "^23.1.0"

[tool.poetry.group.dev.dependencies]
black = ">=22.12,<24.0"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
coverage = {extras = ["toml"], version = "^7.0.1"}
ruff = ">=0.0.246,<0.0.281"
mypy = "^1.3.0"

[tool.commitizen]
name = "cz_gitmoji"
version = "0.2.0"
bump_message = "ðŸ”– bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
version_files = ["pyproject.toml:^version"]
update_changelog_on_bump = true

[tool.black]
target-version = ["py37", "py38", "py39", "py310", "py311"]

[tool.ruff]
ignore = [
  # Line too long
  "E501",
  # unable to detect undefined names
  "F403",
  # may be undefined or defined from star imports
  "F405",
]
fix = true
unfixable = ["F401", "F841"]
src = ["src", "test"]

[tool.ruff.per-file-ignores]
# ignore usage of `assert` in tests
"*/tests/*" = ["S101"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.coverage.run]
branch = true
parallel = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.report]
fail_under = 80
precision = 1
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.pytest.ini_options]
addopts = """--color=yes --doctest-modules --exitfirst --failed-first \
  --strict-markers --strict-config --verbosity=2 \
  --junitxml=reports/pytest.xml --cov"""
testpaths = ["src", "tests"]

[tool.mypy]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
