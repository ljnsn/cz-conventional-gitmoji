[tool.poetry]
name = "commitizen-gitmoji"
version = "0.1.0"
description = "A commitizen plugin that combines gitmoji and conventional."
authors = ["ljnsn <82611987+ljnsn@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
packages = [
  {include = "shared", from = "src"},
  {include = "cz_gitmoji", from = "src"},
  {include = "gitmojify", from = "src"}
]
repository = "https://github.com/ljnsn/cz-conventional-gitmoji"

[tool.poetry.scripts]
gitmojify = "gitmojify.mojify:run"

[tool.poetry.dependencies]
python = "^3.7"
commitizen = "^2.38.0"
attrs = "^22.2.0"

[tool.poetry.group.dev.dependencies]
black = "^22.12.0"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
isort = "^5.11.4"
coverage = {extras = ["toml"], version = "^7.0.1"}

[tool.commitizen]
name = "cz_gitmoji"
version = "0.1.0"
tag_format = "$version"
version_files = ["pyproject.toml:^version"]

[tool.black]
target-version = ["py37", "py38", "py39", "py310"]

[tool.isort]
profile = "black"

[tool.ruff]
ignore_extend = [ "F405" ]

[tool.coverage.run]
branch = true
parallel = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.report]
fail_under = 80
precision = 1
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.coverage.xml]
output = "reports/coverage.xml"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
